
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import backend.Doente;
import javax.swing.JOptionPane;
import backend.Serializacao;
import backend.Sistema;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.UUID;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.RowFilter;
import javax.swing.RowFilter.ComparisonType;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * 
 */
public class PaginaDoentes extends javax.swing.JFrame {
    
    DefaultTableModel model; 
    private Sistema sistema;
    private Serializacao bd;
    private int indiceHospital;
    private int indiceEnfermaria;
    private int indiceMedico;
   
  
    
    /**
     * 
     * @param sistema
     * @param bd
     * @param indiceHospital
     * @param indiceEnfermaria
     * @param indiceMedico 
     */
    
    public PaginaDoentes(Sistema sistema, Serializacao bd, int indiceHospital, int indiceEnfermaria, int indiceMedico) {
        initComponents();

        model = (DefaultTableModel) tableDoentes.getModel();
        this.sistema = sistema;
        this.bd = bd;      
        this.indiceHospital = indiceHospital;
        this.indiceEnfermaria = indiceEnfermaria;
        this.indiceMedico = indiceMedico;
        
        carregarTabelaDoente();
        
        //ordena tabela de forma ascedente e descendente
        tableDoentes.setRowSorter(new TableRowSorter(model));
       
    }
                
    public void carregarTabelaDoente()
    {
        model.setRowCount(0);
        
        ArrayList<Doente> doente = sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente();
        
        for (int indiceDoente = 0; indiceDoente < doente.size(); indiceDoente++) {
            
            Doente doent = sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente().get(indiceDoente);
            
            //compara o utilizador que está associado ao doente com o que está logado no preciso momento
             if (doent.getUtiLigado().equals(sistema.getUtilizadorLigado())) {
                 model.addRow(new Object[]{doent.getNCama(), doent.getNomeDoente(), doent.getDataNasc(), doent.getLocalidade(), doent.getGravidade(), doent.getDataEntrada(), doent.getDataSaida(), doent.getIdDoente()});
            }
        }
        tableDoentes.setModel(model);
    }
    
   private void filtrar(String gravidade) 
   {
       TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
       tableDoentes.setRowSorter(tr);
       
       if (!"-- Selecione gravidade --".equals(gravidade))
       {
           tr.setRowFilter(RowFilter.regexFilter(gravidade));
       } else {
           //se não quisermos aplicar nenhum filtro, os valores inseridos na tabela
           //voltam a aparecer
           tableDoentes.setRowSorter(tr);
       }
       
   }
    
    private void guardarAlteracoes() {
    bd.gravaSistema(sistema);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        btEditar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btExcluir = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btInserir = new javax.swing.JButton();
        txtCama = new javax.swing.JTextField();
        txtLocalidade = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        imgRetroceder = new javax.swing.JLabel();
        imgHome = new javax.swing.JLabel();
        DataSaida = new com.toedter.calendar.JDateChooser();
        dataNasc = new com.toedter.calendar.JDateChooser();
        DataEntrada = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDoentes = new javax.swing.JTable();
        comboGravidade = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        comboSearch = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(805, 480));
        setMinimumSize(new java.awt.Dimension(804, 479));
        setUndecorated(true);
        getContentPane().setLayout(null);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        jLabel3.setText("Lista de Doentes");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(350, 10, 150, 20);

        btEditar.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        btEditar.setText("Editar");
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });
        getContentPane().add(btEditar);
        btEditar.setBounds(690, 280, 100, 30);

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel10.setText("Data de Saída :");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(240, 390, 110, 20);

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel11.setText("Data de Entrada :");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(240, 340, 120, 20);

        jLabel12.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel12.setText("Gravidade :");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(240, 290, 80, 20);

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel15.setText("Cama :");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(10, 440, 60, 20);

        jLabel16.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel16.setText("Localidade :");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 340, 80, 20);

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel17.setText("Data Nasc:");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(10, 390, 70, 20);

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel18.setText("Nome :");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(10, 290, 60, 20);

        btExcluir.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(btExcluir);
        btExcluir.setBounds(690, 330, 100, 30);

        btLimpar.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });
        getContentPane().add(btLimpar);
        btLimpar.setBounds(570, 330, 100, 30);

        btInserir.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        btInserir.setText("Inserir");
        btInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserirActionPerformed(evt);
            }
        });
        getContentPane().add(btInserir);
        btInserir.setBounds(570, 280, 100, 30);

        txtCama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCamaActionPerformed(evt);
            }
        });
        getContentPane().add(txtCama);
        txtCama.setBounds(100, 430, 110, 30);
        getContentPane().add(txtLocalidade);
        txtLocalidade.setBounds(100, 330, 110, 30);
        getContentPane().add(txtNome);
        txtNome.setBounds(100, 280, 110, 30);

        imgRetroceder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/undo-button2.png"))); // NOI18N
        imgRetroceder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgRetrocederMouseClicked(evt);
            }
        });
        getContentPane().add(imgRetroceder);
        imgRetroceder.setBounds(720, 20, 24, 30);

        imgHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sydney-opera-house.png"))); // NOI18N
        imgHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgHomeMouseClicked(evt);
            }
        });
        getContentPane().add(imgHome);
        imgHome.setBounds(760, 20, 30, 30);
        getContentPane().add(DataSaida);
        DataSaida.setBounds(370, 380, 160, 30);
        getContentPane().add(dataNasc);
        dataNasc.setBounds(100, 380, 110, 30);
        getContentPane().add(DataEntrada);
        DataEntrada.setBounds(370, 330, 160, 30);

        tableDoentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cama", "Nome", "Data de Nascimento", "Localidade", "Gravidade", "Data Entrada", "Data de Saída", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDoentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDoentesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableDoentes);
        if (tableDoentes.getColumnModel().getColumnCount() > 0) {
            tableDoentes.getColumnModel().getColumn(0).setResizable(false);
            tableDoentes.getColumnModel().getColumn(1).setResizable(false);
            tableDoentes.getColumnModel().getColumn(2).setResizable(false);
            tableDoentes.getColumnModel().getColumn(3).setResizable(false);
            tableDoentes.getColumnModel().getColumn(4).setResizable(false);
            tableDoentes.getColumnModel().getColumn(5).setResizable(false);
            tableDoentes.getColumnModel().getColumn(6).setResizable(false);
            tableDoentes.getColumnModel().getColumn(7).setResizable(false);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 780, 190);

        comboGravidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecione Gravidade -- ", "Moderado", "Grave", "Muito Grave" }));
        getContentPane().add(comboGravidade);
        comboGravidade.setBounds(370, 280, 160, 30);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(80, 50, 120, 20);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        jLabel2.setText("Pesquisar:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 50, 80, 20);

        comboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecione gravidade --", "Moderado", "Grave", "Muito Grave" }));
        comboSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSearchItemStateChanged(evt);
            }
        });
        getContentPane().add(comboSearch);
        comboSearch.setBounds(210, 50, 170, 20);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/backgroundPRI.png"))); // NOI18N
        jLabel1.setMinimumSize(new java.awt.Dimension(848, 521));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 850, 520);

        setSize(new java.awt.Dimension(804, 479));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        // TODO add your handling code here:
    try {
        
            SimpleDateFormat sdf = new SimpleDateFormat ("dd/MM/yyyy");
    
        
            String dataNascimento = sdf.format(dataNasc.getDate());  
            String dataEntrada = sdf.format(DataEntrada.getDate()); 
            String dataSaida = sdf.format(DataSaida.getDate()); 

            //Obter data atual
            Locale locale1 = Locale.UK;
            TimeZone tz1 = TimeZone.getTimeZone("GMT");
            Calendar dataAtual = Calendar.getInstance(tz1, locale1);
            //String dataAtual = sdf.format(data.getTime());
    
            int indiceDoente = tableDoentes.getSelectedRow();

            Doente editarDoente = sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente().get(indiceDoente);

            if (indiceDoente == -1)
            {
                    JOptionPane.showMessageDialog(null,"Selecione um doente","Atenção",JOptionPane.WARNING_MESSAGE);         
            }
           
            
             for ( Doente doente : sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente() )
            {
                if (doente.getNomeDoente().equals(txtNome.getText()) && (String.valueOf(doente.getNCama())).equals(txtCama.getText()))
                {
                    JOptionPane.showMessageDialog(null,"Este doente já existe","Erro",JOptionPane.ERROR_MESSAGE);
                    return;
                }
        
            }
            
            for ( Doente doente : sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente() )
            {
                if (doente.getNomeDoente().equals(txtNome.getText()) && (String.valueOf(doente.getNCama())).equals(txtCama.getText()))
                {
                    JOptionPane.showMessageDialog(null,"Este doente já existe","Erro",JOptionPane.ERROR_MESSAGE);
                    return;
                }
        
            } 
             
            if (txtCama.getText().isEmpty()) {
                 JOptionPane.showMessageDialog(null,"Introduza a cama do doente","Erro",JOptionPane.ERROR_MESSAGE);
                 txtCama.requestFocus();
                 return;
            } 

            if (txtNome.getText().isEmpty()) {
                 JOptionPane.showMessageDialog(null,"Introduza o nome do doente","Erro",JOptionPane.ERROR_MESSAGE);
                 txtNome.requestFocus();
                 return;
            }  

            if (txtNome.getText().matches(".*\\d.*")){
                 JOptionPane.showMessageDialog(null," Nome do doente inválido","Erro",JOptionPane.ERROR_MESSAGE);
                 txtNome.requestFocus();
                 return;
            }

            if (txtLocalidade.getText().isEmpty()) {
                 JOptionPane.showMessageDialog(null,"Introduza a localidade do doente","Erro",JOptionPane.ERROR_MESSAGE);
                 txtLocalidade.requestFocus();
                 return;
            }

            //Impede que existam localidades com digitos e caracteres no nome. Exemplo: 123fg4 
            if (txtLocalidade.getText().matches(".*\\d.*")){
                 JOptionPane.showMessageDialog(null," Nome da localidade inválido","Erro",JOptionPane.ERROR_MESSAGE);
                 txtLocalidade.requestFocus();
                 return;
            }

             if ((comboGravidade.getSelectedIndex()==0) || (comboGravidade.getSelectedIndex() < 0)){
                 JOptionPane.showMessageDialog(null," Selecione a gravidade do estado do doente","Erro",JOptionPane.ERROR_MESSAGE);             
                 return;
            }
         
         
            //Se a data de Entrada for > que a data de saida
            //compareTo retorna > 0 se dataEntrada > dataSaida

             if (DataEntrada.getDate() == null)
             {
                JOptionPane.showMessageDialog(null," Introduza a data de entrada","Erro",JOptionPane.ERROR_MESSAGE);             
                return;
             }

              if (DataSaida.getDate() == null)
             {
                JOptionPane.showMessageDialog(null," Introduza a data de saida","Erro",JOptionPane.ERROR_MESSAGE);             
                return;
             }

              if (dataNasc.getDate() == null)
             {
                JOptionPane.showMessageDialog(null," Introduza a data de nascimento","Erro",JOptionPane.ERROR_MESSAGE);             
                return;
             }

             if(DataSaida.getCalendar().before(DataEntrada.getCalendar()))
             {
                 JOptionPane.showMessageDialog(null," A data de entrada não pode ser superior à data de saída","Erro",JOptionPane.ERROR_MESSAGE);             
                 return;
             }

             if (DataEntrada.getCalendar().before(dataNasc.getCalendar()))
             {
                 JOptionPane.showMessageDialog(null," A data de nascimento não pode ser superior à data de entrada","Erro",JOptionPane.ERROR_MESSAGE);             
                 return;
             }

             if (DataSaida.getCalendar().before(dataNasc.getCalendar()))
             {
                 JOptionPane.showMessageDialog(null," A data de nascimento não pode ser superior à data de saída","Erro",JOptionPane.ERROR_MESSAGE);             
                 return;
             }    

              if (dataAtual.before(dataNasc.getCalendar()))
             {
                 JOptionPane.showMessageDialog(null," A data de nascimento não pode ser superior à data atual","Erro",JOptionPane.ERROR_MESSAGE);             
                 return;
             }
         
       
            int nCamas = sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getNCamas();
     
            if (Integer.parseInt(txtCama.getText()) > nCamas || Integer.parseInt(txtCama.getText()) <= 0) 
                {
                     JOptionPane.showMessageDialog(null,"O número da cama que inseriu não existe", "Erro", JOptionPane.ERROR_MESSAGE);
                     return;
                }
         
            
            editarDoente.setNome(txtNome.getText());
            editarDoente.setLocalidade(txtLocalidade.getText());
            editarDoente.setNCama(Integer.parseInt(txtCama.getText()));
            editarDoente.setDataEntrada(sdf.format(DataEntrada.getDate()));
            editarDoente.setDataNasc(sdf.format(dataNasc.getDate()));
            editarDoente.setDataSaida(sdf.format(DataSaida.getDate())); 
            editarDoente.setGravidade(comboGravidade.getSelectedItem().toString());

    } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null," Preencha todos os campos","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
        }
    
    carregarTabelaDoente();
    guardarAlteracoes();

    }//GEN-LAST:event_btEditarActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        // TODO add your handling code here:
        txtNome.setText(null);      
        dataNasc.setDate(null);
        txtLocalidade.setText(null);
        txtCama.setText(null);
        comboGravidade.setSelectedItem(null); 
        DataEntrada.setDate(null);
        DataSaida.setDate(null);
        
    }//GEN-LAST:event_btLimparActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableDoentes.getModel();
        int row = tableDoentes.getSelectedRow();
        if(row >= 0){
            model.removeRow(row); //remove a linha selecionada
            sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente().remove(row);            
            carregarTabelaDoente();
            guardarAlteracoes();      
            JOptionPane.showMessageDialog(this, "Removido!");
            txtNome.setText("");
            txtLocalidade.setText("");       
            txtCama.setText("");
            comboGravidade.setSelectedItem(null);         
            dataNasc.setDate(null);
            DataSaida.setDate(null);
            DataEntrada.setDate(null);
                 
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Selecione um doente");
        }
    }//GEN-LAST:event_btExcluirActionPerformed

    private void txtCamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCamaActionPerformed

    private void btInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserirActionPerformed
       // TODO add your handling code here:       
       try {
        String id = UUID.randomUUID().toString();
        
        //converter calendar para string
        SimpleDateFormat sdf = new SimpleDateFormat ("dd/MM/yyyy");
        String dataNascimento = sdf.format(dataNasc.getDate());  
        String dataEntrada = sdf.format(DataEntrada.getDate()); 
        String dataSaida = sdf.format(DataSaida.getDate()); 
        
        //Obter data atual
        Locale europa = Locale.UK;
        TimeZone gmt = TimeZone.getTimeZone("GMT");
        Calendar dataAtual = Calendar.getInstance(gmt, europa);
       // String dataAtual = sdf.format(data.getTime());
        
        String gravidadeSelecionada = comboGravidade.getSelectedItem().toString();
         
        //Percorre a tabela doentes e vai ver se o nome de cada doente inserido
        //é igual ao nome que se encontra na text box
        
          for ( Doente doente : sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente() )
          {
            if (doente.getNomeDoente().equals(txtNome.getText()) && (String.valueOf(doente.getNCama())).equals(txtCama.getText()))
            {
                JOptionPane.showMessageDialog(null,"Este doente já existe","Erro",JOptionPane.ERROR_MESSAGE);
                return;
            }
        
          }
          
           //Percorre a tabela doentes e vai ver se o nº de cama de cada doente inserido
           //é igual ao nº de cama que se encontra ne text box
           for ( Doente doente : sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente() )
           {
            if ((String.valueOf(doente.getNCama())).equals(txtCama.getText()))
            {
                JOptionPane.showMessageDialog(null,"Essa cama já está ocupada","Erro",JOptionPane.ERROR_MESSAGE);
                return;
            }
        
        }
          
        if (txtCama.getText().isEmpty()) {
             JOptionPane.showMessageDialog(null,"Introduza a cama do doente","Erro",JOptionPane.ERROR_MESSAGE);
             txtCama.requestFocus();
             return;
        }
        
        
        if (txtNome.getText().isEmpty()) {
             JOptionPane.showMessageDialog(null,"Introduza o nome do doente","Erro",JOptionPane.ERROR_MESSAGE);
             txtNome.requestFocus();
             return;
        }  
        
        //Impede que existam doentes com digitos e caracteres no nome. Exemplo: 123fg4 
        if (txtNome.getText().matches(".*\\d.*")){
             JOptionPane.showMessageDialog(null," Nome do doente inválido","Erro",JOptionPane.ERROR_MESSAGE);
             txtNome.requestFocus();
             return;
        }
        
        //Se a text box camas não for constituida, somente, por algarismos, dá erro
        if (!txtCama.getText().matches("[0-9]+")) {
             JOptionPane.showMessageDialog(null,"Número de cama inválido","Erro",JOptionPane.ERROR_MESSAGE);
             txtNome.requestFocus();
             return;
        }
        
        if (txtLocalidade.getText().isEmpty()) {
             JOptionPane.showMessageDialog(null,"Introduza a localidade do doente","Erro",JOptionPane.ERROR_MESSAGE);
             txtLocalidade.requestFocus();
             return;
        }
        
        //Impede que existam localidades com digitos e caracteres no nome. Exemplo: 123fg4 
        if (txtLocalidade.getText().matches(".*\\d.*")){
             JOptionPane.showMessageDialog(null," Nome da localidade inválido","Erro",JOptionPane.ERROR_MESSAGE);
             txtLocalidade.requestFocus();
             return;
        }
        
         if ((comboGravidade.getSelectedIndex()==0) || (comboGravidade.getSelectedIndex() < 0)){
             JOptionPane.showMessageDialog(null," Selecione a gravidade do estado do doente","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
        }
         
         
        //Se a data de Entrada for > que a data de saida
        //compareTo retorna > 0 se dataEntrada > dataSaida
        
         if (DataEntrada.getDate() == null)
         {
            JOptionPane.showMessageDialog(null," Introduza a data de entrada","Erro",JOptionPane.ERROR_MESSAGE);             
            return;
         }
         
          if (DataSaida.getDate() == null)
         {
            JOptionPane.showMessageDialog(null," Introduza a data de saida","Erro",JOptionPane.ERROR_MESSAGE);             
            return;
         }
          
          if (dataNasc.getDate() == null)
         {
            JOptionPane.showMessageDialog(null," Introduza a data de nascimento","Erro",JOptionPane.ERROR_MESSAGE);             
            return;
         }
          
         if(DataSaida.getCalendar().before(DataEntrada.getCalendar()))
         {
             JOptionPane.showMessageDialog(null," A data de entrada não pode ser superior à data de saída","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
         }
         
         if (DataEntrada.getCalendar().before(dataNasc.getCalendar()))
         {
             JOptionPane.showMessageDialog(null," A data de nascimento não pode ser superior à data de entrada","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
         }
     
         if (DataSaida.getCalendar().before(dataNasc.getCalendar()))
         {
             JOptionPane.showMessageDialog(null," A data de nascimento não pode ser superior à data de saída","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
         } 
         
         if (DataEntrada.getCalendar().before(dataAtual))
         {
             JOptionPane.showMessageDialog(null," A data de entrada não pode ser inferior à data atual","Erro",JOptionPane.ERROR_MESSAGE);             
             return; 
         }
         
          if (dataAtual.before(dataNasc.getCalendar()))
         {
             JOptionPane.showMessageDialog(null," A data de nascimento não pode ser superior à data atual","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
         }
         
       
     //Busca o número de camas que a enfermaria que selecionei é constituida
     int nCamas = sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getNCamas();
            
     //Se o nº da cama que está na text box for superior ao que foi definido anteriormente
     //Se o nº da cama for negativo
     // =>>>>> Erro
            if (Integer.parseInt(txtCama.getText()) > nCamas || Integer.parseInt(txtCama.getText()) <= 0) 
                {
                     JOptionPane.showMessageDialog(null,"O número da cama que inseriu não existe", "Erro", JOptionPane.ERROR_MESSAGE);
                     return;
                }
            
    /*     try {   
         int rowIndex = tableDoentes.getSelectedRow();      
         String numeroCama = tableDoentes.getValueAt(rowIndex, 4).toString();  
         
            //Se o que está na coluna 4 for diferente ao que está na txtCamas
            if(!numeroCama.equals(txtCama.getText())) 
                {             
                  int row = tableDoentes.getRowCount();  

                    for (int i = 0; i < row ; i++)
                        {
                            //Vai ver na coluna 4, linha a linha, se o numero da cama que está a ser inserido
                            // é igual que está na textBox
                            if (tableDoentes.getValueAt(i, 4).toString().equals(txtCama.getText()))
                                {
                                    JOptionPane.showMessageDialog(null,"Esta cama já se encontra ocupada", "Erro", JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                        }   
                 }
         } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(null,"aaaaaaa", "Erro", JOptionPane.ERROR_MESSAGE);
         } 
      */
        
        Doente doente = new Doente(sistema.getUtilizadorLigado(), id, txtNome.getText(), txtLocalidade.getText(), gravidadeSelecionada, dataNascimento, dataEntrada, dataSaida, Integer.parseInt(txtCama.getText()));
       
        try {
        sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().adicionar(doente);
        JOptionPane.showMessageDialog(null, "Doente " + txtNome.getText() + " adicionado!");
        txtNome.setText("");
        txtLocalidade.setText("");       
        txtCama.setText("");
        comboGravidade.setSelectedItem(null);         
        dataNasc.setDate(null);
        DataSaida.setDate(null);
        DataEntrada.setDate(null);
        
        carregarTabelaDoente();   
        
        }catch(RuntimeException e) {
            //Todas as labels estão preenchidas, no entanto com o tipo de dados errado
            JOptionPane.showMessageDialog(null,"Este doente já se encontre registado.","Erro",JOptionPane.ERROR_MESSAGE);
        }
        
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null," Preencha todos os campos","Erro",JOptionPane.ERROR_MESSAGE);             
             return;
        }
        
            
        guardarAlteracoes();     
        
    }//GEN-LAST:event_btInserirActionPerformed

    private void imgHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgHomeMouseClicked
        // TODO add your handling code here:
        dispose();
        PaginaInicialUtilizador paginaInicial = new PaginaInicialUtilizador(sistema,bd);
        paginaInicial.setLocationRelativeTo(null);
        paginaInicial.setVisible(true);
    }//GEN-LAST:event_imgHomeMouseClicked

    private void imgRetrocederMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgRetrocederMouseClicked
        // TODO add your handling code here:
        dispose();
       PaginaProfissionaisSaude p = new PaginaProfissionaisSaude(sistema,bd,indiceHospital,indiceEnfermaria);
        //FichaHospital p = new FichaHospital(sistema,bd,table.getSelectedRow());
        p.setLocationRelativeTo(null);
        p.setVisible(true);
    }//GEN-LAST:event_imgRetrocederMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        
        //regexFilter --> Retorna um RowFilterque usa uma expressão regular para determinar quais entradas incluir.
                          //neste caso a entrada é o search 
        DefaultTableModel table = (DefaultTableModel)tableDoentes.getModel();
        String search = txtSearch.getText().toLowerCase();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table);
        tableDoentes.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(search));
        
        //filtra as datas
       RowFilter.dateFilter(ComparisonType.AFTER, new Date());
       
       
               
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyTyped

    private void comboSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSearchItemStateChanged
        // TODO add your handling code here:
        String gravidade = comboSearch.getSelectedItem().toString();
        
        filtrar(gravidade);
        
        
    }//GEN-LAST:event_comboSearchItemStateChanged

    private void tableDoentesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDoentesMouseClicked
        // TODO add your handling code here:
        int indiceDoente = tableDoentes.getSelectedRow();  //quando o utilizador seleciona uma enfermaria clicando
                                                  //na tabela

        if(indiceDoente>=0 && indiceDoente < sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente().size()) {
            
            Doente doente = sistema.getListaHospital().getListaHospital().get(indiceHospital).getListaEnfermaria().getListaEnfermaria().get(indiceEnfermaria).getListaMedico().getListaMedico().get(indiceMedico).getListaDoente().getListaDoente().get(indiceDoente);
            txtNome.setText(doente.getNomeDoente());
            txtLocalidade.setText(doente.getLocalidade());
           

            dataNasc.setDateFormatString(tableDoentes.getValueAt(indiceDoente, 2).toString());
            txtCama.setText(String.valueOf(doente.getNCama()));
            comboGravidade.setSelectedItem(doente.getGravidade());
           // DataEntrada.setText(doente.getDataEntrada());
           // DataSaida.setText(doente.getDataSaida());
        }
    }//GEN-LAST:event_tableDoentesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main1(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaginaDoentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaginaDoentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaginaDoentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaginaDoentes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ListaDoentes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DataEntrada;
    private com.toedter.calendar.JDateChooser DataSaida;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btInserir;
    private javax.swing.JButton btLimpar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> comboGravidade;
    private javax.swing.JComboBox<String> comboSearch;
    private com.toedter.calendar.JDateChooser dataNasc;
    private javax.swing.JLabel imgHome;
    private javax.swing.JLabel imgRetroceder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableDoentes;
    private javax.swing.JTextField txtCama;
    private javax.swing.JTextField txtLocalidade;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

 
}
